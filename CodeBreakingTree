/** @author William Turner
  * @version 1.2 4/24/2019
  * the main tree structure for the codebreaking process
 */

import java.util.ArrayList;

public class CodeBreakingTree {
  
  // the first node of the tree
  treeNode headNode; 
  
  // array of tree headNode.BranchNodes
  //ArrayList<treeNode> headNode.BranchNodes = new ArrayList<treeNode>();
  
  // The array of initial keys to try 
  ArrayList<Key> theobkeys = new ArrayList<Key>();
  
  // The order of letters in s by frequency
  Character[] letterorder = new Character[26]; 
  
  // The possible characters to add to the key
  StringBuilder possibilities = new StringBuilder("");
  
  // Copy of possibilities
  StringBuilder possibilitiestemp = new StringBuilder("");
  
  // Makes array of five letters to attempt all decryptions for
  Character[] theob = new Character[3];
  
  // the text being handled at this node
  String s;
   
  // a coder object to try keys, among other things
  Coder coder;
  
  // a usefull loop tracking variable
  int ran = 0;
   int ranfw = 0;
  
  // constructor sets up head node and enacts special branchNode process to find first word
  public CodeBreakingTree(String s, Coder cc) {
    
    Key startkey = new Key("--------------------------");
    headNode = new treeNode(startkey, s, "name", cc);
    boolean found = false;
    this.s = s;
    this.coder = cc;
   
  // fills out letterorder to match countLetters
  for(int i = 0; i < 26; i++) {
    
   letterorder[i] = coder.countLetters(s)[i]; 
  }
  
  // Makes array of three letters to attempt all decryptions for
  Character[] theob = new Character[3];
    theob[0] = 't';
    theob[1] = 'h';
    theob[2] = 'e';
    
  
  // Adds characters in letterOrder to possibilities and possibilitiestemp
  for(int i = 0; i < 10; i++) {

    possibilities.append(letterorder[i].toString());
    possibilitiestemp.append(letterorder[i].toString());
  }
 
  // StringBuilder in blank key format to fill differently to create headNode.BranchNodes
  StringBuilder w = new StringBuilder("--------------------------");
  
  /* triple for loop tests first 10! possible keys for word "the" by order of likeliness.
   * removes letter currently added to potential key from possibilites before executing next loop
   * breaks once achieving >5% percentCorrect
   */
  for(int i = 0; i < 10; i++) {
     
     Character tempi = new Character(possibilities.charAt(i));
     w.replace(4, 5, tempi.toString());
     possibilities.deleteCharAt(i);

     
     for(int j = 0; j < 9; j++) {
       
       Character tempj = new Character(possibilities.charAt(j));
       w.replace(19, 20, tempj.toString());
       possibilities.deleteCharAt(j);
       
       for(int k = 0; k < 8; k++) {
         
         Character tempk = new Character(possibilities.charAt(k));
         w.replace(7, 8, tempk.toString());
         
         
         //theobkeys.add(new Key(w.toString()));
         Key newkey = new Key(w.toString());
         
         // old checking line
         //System.out.println(w);
         String name = "name";
         treeNode n = new treeNode(newkey, s, name, this.coder);
         headNode.BranchNodes.add(n);
         if(n.getPercentCorrect() > 5)
          found = true;
         if(found)
           break;
         ranfw++;
       }
       
       if(found)
         break;
       else
       possibilities.insert(j, tempj);
     }
     
     if(found)
       break;
     else
     possibilities.insert(i, tempi);
   }
   
   // makes new tree headNode.BranchNodes with key battery
   //for(int z = 0; z < theobkeys.size() - 1; z++) {
     
     //String name;
     //name = "name" + (z);
     //headNode.BranchNodes.add(new treeNode(theobkeys.get(z), s, name, this.coder));
     
     // old checking line
     //System.out.println(headNode.BranchNodes.get(z).getKeyedText());
   //}
 } 
}
