/**
 * @author William Turner
 * Main class for EECS 393 cipher program project
 * @version 1.6 4/25/2019
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.lang.ArrayIndexOutOfBoundsException;
import java.lang.NullPointerException;
import java.util.Stack;

public class Coder{
  
  // table used for caesar and vignere ciphers
  StringBuilder[] table = new StringBuilder[26];
  
  // key using regular alphabet
  Key regularalphabet = new Key("abcdefghijklmnopqrstuvwxyz");
  
  // filereader and bufferedreader for handling text
  FileReader f;
  BufferedReader b;
  
  // trie for helper methods
  Trie t = new Trie();
  
  // basic string used in testing and debugging
  String str = new String("start");
  
  // loop tracking variable
  int ran = 0;

 public Coder(){
   
   // double for loop to construct vigenere table
   for(int i = 0; i < 26; i++){
     table[i] = new StringBuilder("");
     for(int j = 0; j < 26; j++){
       
      table[i].append((char)(97 + ((i + j) % 26))); 
     }
   }
   
   // try/catch series to set up trie
   
   try {
      f = new FileReader("corncob_lowercase.txt");
      b = new BufferedReader(f);
      
      while ((str = b.readLine()) != null) {
            
       t.insert(str);
      }
    }
   
    // catches prompt printing of relevant information
    catch (IOException e) {
      
      System.out.println("fail");
    }
    
    catch (ArrayIndexOutOfBoundsException a) {
      
      System.out.println(str);
    }
    
    catch (NullPointerException n){
      
      System.out.println(str);
    }
 }
 
 /** The process for the Caesar cipher
   * @param String s The string representing the text document
   * @param int shift The shift count to use with the Caesar Cipher
   * @return <code>this.substitutionMethod(key1, key2, text)<code> the processed text
  */ 
 public String caesarCipher(String s, int shift, boolean encode){
   
   Key key1 = new Key("");
   Key key2 = new Key("");
   
   if (encode) {
     
    key1.setString(table[0].toString());
    key2.setString(table[shift].toString());
   }
   
   else {
    
    key1.setString(table[shift].toString());
    key2.setString(table[0].toString());
   }  
   return this.substitutionMethod(key1, key2, s);
 }
 
 /** The process for the Vigenere cipher
   * @param String s the text to be worked with
   * @return <code>returnstring<code> the processed text
  */
  public String vigenereCipher(String s, Keyword keyword, boolean encode) {
 
    StringBuilder returnstring = new StringBuilder("");
    StringBuilder plaintext = new StringBuilder("");
    
    int p;
    
    for(int i = 0; i < s.length(); i++){
      
     if (s.charAt(i) != ' ')
       plaintext.append(s.charAt(i));
    }
   
     // for loop to build returnstring
     for(int i = 0; i < plaintext.length(); i++) {
      
         p = (i) % (keyword.length());   
       
       if(encode)
         returnstring.append(this.caesarCipher( Character.toString(plaintext.charAt(i)), 
                                             (Character.getNumericValue(keyword.charAt(p)) - 10), true ));
       else
         returnstring.append(this.caesarCipher( Character.toString(plaintext.charAt(i)), 
                                              (Character.getNumericValue(keyword.charAt(p)) - 10), false )); 
       
    }
    return returnstring.toString();
 }
 
 /** The method to perform the monoalphabetic substitution process
   * @param Key key1 the first half of the key
   * @param Key key2 the second half of the key
   * @param String temptext the text to be worked with
   * @return <code>returnstring.toString()<code> the processed text
  */ 
 public String substitutionMethod(Key key1, Key key2, String s) {
    
  StringBuilder rs = new StringBuilder();
    
    // for loop to run through text and check character against key to append correct value to returnstring
    for(int i = 0; i < s.length(); i++) { 
     
      if(s.charAt(i) == ' ')
        rs.append(' ');
      else if(s.charAt(i) == '\n')
        rs.append('\n');
      else if(s.charAt(i) > 96 && s.charAt(i) < 123)
        rs.append(s.charAt(i));

      else if (s.charAt(i) > 64 && s.charAt(i) < 91) { 
        
        char c = (char)(s.charAt(i) + 32);
        
        if(key1.indexOf(c) == 0 && key1.charAt(0) != c )
          rs.append(s.charAt(i));
        else  
        rs.append(key2.charAt(key1.indexOf(c)));
        
      }
    }
    
    return rs.toString();
  }
 
 /** The method to count the frequency of characters in a string
   * @param String s the string to count the letters in
   * @return <code>frequencies<code> the int array counting the frequency of each character
  */ 
 public char[] countLetters(String s){
   
   String input = this.toLowerCase(s);
   int[] frequencies = new int[26];
   
   char[] letters = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
    
    // loop to run through string and index appropriate array value at each character 
    for(int i = 0; i < input.length(); i++) {
      
      if(input.charAt(i) != ' ' && input.charAt(i) > 96)
         frequencies[((int) input.charAt(i)) - 97]++; 
    }  
    
    // insertion sort so that return array is sorted highest to lowest frequency
    for(int j = 1; j < 26; j++) {
      
      char temp = letters[j];
      int k = j-1;
      
      while(k >= 0 && (frequencies[letters[k] - 97] < frequencies[temp - 97])) {
        
        letters[k + 1] = letters[k];
        k = k - 1;
      }
      
      letters[k + 1] = temp;
    }
   
    return letters;
  }
 
 /** checks a string for repeats of characters
   * @param String s the plain text
   * @return <code>doesitrepeat<code> the boolean representing whether or not a string has repeat characters
  */ 
 public boolean checkForRepeats(String s){
   
   boolean doesitrepeat = false;
   String input = s;
   int[] frequencies = new int[26];
   
   // run through string and check for repeats
   for(int i = 0; i < input.length(); i++){
     
    if(frequencies[((int) s.charAt(i)) - 97] == 0)
      frequencies[((int) s.charAt(i)) - 97]++;
    else
      doesitrepeat = true;
   }
  return doesitrepeat; 
 }
 
 /** tells whether  or not a string is a word
   * @param String word the word to check
   * @return <code>t.search(word)<code>
  */ 
 public boolean isItAWord(String word) {     
   
        return t.search(word);
 }
 
 /** tells what percent words (by letter volume) a string is
   * @param String s
   * @return <code>((inWords / (inWords + notInWords)) * 100)<code>
  */ 
 public double percentWords(String s) {
   
   // amount of characters in real words
   double inWords = 0;
   // amount of characters not in real words
   double notInWords = 0;
   // number of spaces in the string
   double spaces = 0;
   // Stringbuilder that temporarily holds each word
   StringBuilder word = new StringBuilder("");
   
   // whether or not the current word has capital letters
   boolean hascaps = false;
   
   /* runs through string, adds character to "word" until it reaches a space, then checks whether or not "word" is a 
    * word using a trie, then adds to the appropriate variable and resets "word"
    */ 
   for(int i = 0; i < s.length(); i++) {
     
     // checks if current character is capital
     if(s.charAt(i) > 64 && s.charAt(i) < 91) {
       
       hascaps = true;
       
     }
     
     if (i == (s.length() - 1)) {
      
       word.append(s.charAt(i));
       
       // words with capital characters are automatically not in CSEW words
       if(hascaps) {
         
        notInWords = notInWords + word.length();
       }
       
       else if(t.search(word.toString())) 
         inWords = inWords + word.length();
       else 
         notInWords = notInWords + word.length();
     }
     
     if( (s.charAt(i) == (' ')) || s.charAt(i) == '\n') {
       
       if(hascaps) {
         
        hascaps = false;
        notInWords = notInWords + word.length();
       }
       
       else 
        
        if(t.search(word.toString())) 
         inWords = inWords + word.length();
       else 
         notInWords = notInWords + word.length(); 
       

      word.delete(0, word.length() );
      spaces++;
     }
     
     else
       word.append(s.charAt(i));
       
   }
  return ((inWords / (inWords + notInWords)) * 100); 
 }
 
 /** Converts a string to lower case characters
   * @param String s the string to be converted
   * @return <code>returnstring.append(s.charAt(i))<code> the processed string
  */
 public String toLowerCase(String s) {
   
   StringBuilder returnstring = new StringBuilder("");
   
   // runs through string and appends lower case version of all characters to returnstring
   for(int i = 0; i < s.length(); i++) {
     
     if( (64 < ((int)(s.charAt(i)))) && ( ((int)(s.charAt(i))) < 91  ) )
       returnstring.append( (char)(((int)s.charAt(i)) + 32) );
     
     else
       returnstring.append(s.charAt(i));
   }
   
   return returnstring.toString();
 }
 
 public String toCaps(String s) {
   
   StringBuilder returnstring = new StringBuilder("");
   
   for(int i = 0; i < s.length(); i++) {
     
     if(s.charAt(i) > 96 && s.charAt(i) < 123) {
       
      char c = (char)(s.charAt(i) - 32);
      returnstring.append(c);
     }
     
     else
       returnstring.append(s.charAt(i));
   }
  
   return returnstring.toString();
 }
 
 /** tries a potential translation key
   * @param Key key the Key to use for the translation
   * @param String s the text being worked with
   * @return <code>this.substitutionMethod(regularalphabet, key, s)<code> the processed text
  */
 public String tryKey(Key key, String s) {
   
  return this.substitutionMethod(regularalphabet, key, s); 
   //return this.substitutionMethod(key, regularalphabet, s);
 }
 
 /** a development method for testing the number of times the substitution method could run, in order to 
   * handle timing issues
   * @param int i the number of times to run the method
   * @return <code>true<code> when processing is complete
  */
 public boolean timeTest(int i) {
   
  Key k = new Key("abcdefghijklmnopqrstuvwxyz"); 
  String s = new String("i am the very model of a modern major general" +  
                          "\n i have information vegetable animal and mineral" +
                          "\n i know the kings of england and i quote the" +
                          "\n fights historical from marathon to waterloo in order categorical" + 
                          "\n i am very well acquainted too with matters mathematical" + 
                          "\n i understand equations both the simple and quadratical" + 
                          "\n about binomial theorem i am teeming with a lot of news" + 
                          "\n with many cheerful facts about the square of the hypotenuse");
  String ss;
  
  for(int j = 0; j < i; j++) {
    
   ss = this.substitutionMethod(regularalphabet, k, s); 
  }
  
  return true;
 }
}
